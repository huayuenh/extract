---
apiVersion: tekton.dev/v1beta1
kind: Task
metadata:
  name: ciso-image-sign
  labels:
    app.kubernetes.io/version: 1.0.0
spec:
  params:
    - name: continuous-delivery-context-secret
      description: name of the configmap containing the continuous delivery pipeline context secrets
      default: secure-properties
    - name: toolchain-apikey-secret-key
      description: field in the secret that contains the api key used to login to ibmcloud kubernetes service
      default: api-key
    - name: vault-secret
      default: vault-secret
    - name: region
      default: "us-south"
    - name: resource-group
    - name: registry-region
    - name: registry-namespace
    - name: image-name
    - name: image-tag
    - name: ibmcloud-api
      description: the ibmcloud api
      default: https://cloud.ibm.com
    - name: evidence
      default: 'signature-evidence.json'
    - name: pipeline-debug
      description: Pipeline debug mode
      default: "0"
    - name: break-glass-name
      description: Name of the `ConfigMap` that holds Break-Glass mode settings
      default: environment-properties
    - name: break-glass-key
      description: Key in the `break-glass-name` `ConfigMap` that holds the Break-Glass mode settings
      default: break_glass
  stepTemplate:
    env:
      - name: PIPELINE_DEBUG
        value: $(params.pipeline-debug)
  results:
    - name: exit-code
      description: The exit-code of the script
    - name: status
      description: The status based on exit-code
    - name: signature
      description: Signature data file name
  steps:
    - name: sign-image
      image: wcp-compliance-automation-team-docker-local.artifactory.swg-devops.com/csso-image-sign:1.0.0@sha256:cb22e6ad6b3469155719f6bf09bde641208a1e349e5ccc09407204bb069f7b4e
      env:
        - name: IBM_CLOUD_API_KEY
          valueFrom:
            secretKeyRef:
              name: $(params.continuous-delivery-context-secret)
              key: $(params.toolchain-apikey-secret-key)
        - name: VAULT_SECRET
          valueFrom:
            secretKeyRef:
              name: $(params.continuous-delivery-context-secret)
              key: $(params.vault-secret)
        - name: BREAK_GLASS
          valueFrom:
            configMapKeyRef:
              name: $(params.break-glass-name)
              key: $(params.break-glass-key)
              optional: true
        - name: IBMCLOUD_TARGET_REGION
          value: $(params.region)
        - name: RESOURCE_GROUP
          value: $(params.resource-group)
        - name: REGISTRY_REGION
          value: $(params.registry-region)
        - name: REGISTRY_NAMESPACE
          value: $(params.registry-namespace)
        - name: IMAGE_NAME
          value: $(params.image-name)
        - name: IMAGE_TAG
          value: $(params.image-tag)
        - name: API
          value: $(params.ibmcloud-api)
      # yamllint disable rule:line-length
      script: |
          #!/bin/bash
          set +e
          #Required parameters
          #VAULT_SECRET - ciso secret
          #RESOURCE_GROUP - "Default" by default. Resource Group of Key-Protect
          #IBM_CLOUD_API_KEY - access ibm cloud apikey
          #IMAGE_NAME - name of the image
          #IMAGE_TAG - the required tag name
          #REGISTRY_NAMESPACE - the namespace of the registry containing storing the images

          if [[ -n "$BREAK_GLASS" ]]; then
            echo -n $(params.evidence) | tee $(results.signature.path)
            echo -n 0 | tee $(results.exit-code.path)
            echo -n skipped | tee $(results.status.path)
            echo "Break-Glass mode is on, skipping the rest of the task..."
            exit 0
          fi

          TARGET_REGION=$(echo "${REGISTRY_REGION}" | awk -F ":" '{print $NF}')
          ibmcloud login -a ${API} --apikey ${IBM_CLOUD_API_KEY} -r ${TARGET_REGION}

          #REGISTRY_URL - the registry URL e.g. us.icr.io, de.icr.io
          REGISTRY_URL=$(ibmcloud cr info | grep -w 'Container Registry' | awk '{print $3;}' | grep -w 'icr')

          echo "RESOURCE_GROUP $RESOURCE_GROUP"
          echo "IBM_CLOUD_API_KEY $IBM_CLOUD_API_KEY"
          echo "IMAGE_NAME $IMAGE_NAME"
          echo "IMAGE_TAG $IMAGE_TAG"
          echo "REGISTRY_NAMESPACE $REGISTRY_NAMESPACE"
          echo "REGISTRY_URL $REGISTRY_URL"

          #Use utility script for reading from Key Protect

          export secret=$VAULT_SECRET
          KEY_NAME="temp.pfx"
          export filename=${KEY_NAME}

          #create python script for decoding base64 binary file
          #handles binary data better than bash
          cat << EOF > decode.py
          #!/usr/bin/env python
          import base64
          import os
          inputdata=os.environ["secret"]
          outputname=os.environ["filename"]
          result=base64.b64decode(inputdata)
          f=open(outputname, 'wb')
          f.write(result)
          EOF

          chmod 755 ./decode.py

          python3 --version
          #run python script
          echo "RESTORING KEY DATA"
          python3 ./decode.py
          mv ./$KEY_NAME /etc/ekm
          echo "****************"

          #extract alias
          ALIAS=$(ucl list | grep Private)
          ALIAS=${ALIAS#*"Name="}
          ALIAS="${ALIAS//\"}"
          echo "Alias: $ALIAS"

          gpgconf --kill all
          ucl pgp-key -n ${ALIAS}
          FINGERPRINT=$(gpg2 -k)
          FINGERPRINT=${FINGERPRINT%"uid"*}
          FINGERPRINT=${FINGERPRINT#*"[SCEA]"}
          FINGERPRINT=$(echo ${FINGERPRINT} | sed 's/^[ \t]*//;s/[ \t]*$//')

          SIGNING_DIR="signing"
          mkdir ${SIGNING_DIR}

          SIGNING_KEY=${FINGERPRINT}

          if [[ "$SIGNING_KEY" ]]; then
              echo "SIGNING REPO"
              skopeo copy docker://${REGISTRY_URL}/${REGISTRY_NAMESPACE}/${IMAGE_NAME}:${IMAGE_TAG} docker://${REGISTRY_URL}/${REGISTRY_NAMESPACE}/${IMAGE_NAME}:${IMAGE_TAG} --dest-creds iamapikey:${IBM_CLOUD_API_KEY} --src-creds iamapikey:${IBM_CLOUD_API_KEY} --sign-by ${SIGNING_KEY}
          else
              echo "No key found. Unable to sign"
          fi
          PASS=$?
          echo $PASS | tee $(results.exit-code.path)
          if [[ "$SIGNING_KEY" && "$PASS" == 0 ]]; then
            echo "No issues were found"
            REG=${REGISTRY_URL}
            IAMBEARER=$(ibmcloud iam oauth-tokens | awk '/IAM/ { print $4; }')
            NAME=${REGISTRY_NAMESPACE}/${IMAGE_NAME}
            TOKEN=$(curl -s \
            -F "service=registry" \
            -F "grant_type=password" \
            -F "client_id=curlsig" \
            -F "username=iambearer" \
            -F "password=${IAMBEARER}" \
            -F "scope=repository:${NAME}:pull" \
            https://${REG}/oauth/token | jq -r .token)

            echo "TARGET REG $REG"
            echo "NAMESPACE $NAME"
            TMP_DIGEST=$(skopeo inspect --creds iamapikey:${IBM_CLOUD_API_KEY} docker://${REGISTRY_URL}/${REGISTRY_NAMESPACE}/${IMAGE_NAME}:${IMAGE_TAG})
            TMP_DIGEST=$(echo "$TMP_DIGEST" | jq -r '.Digest' | sed 's/sha256://g')
            DIGEST="sha256:${TMP_DIGEST}"

            SIGNATURES=$(curl -s -H "Authorization: Bearer ${TOKEN}" https://${REG}/extensions/v2/${NAME}/signatures/${DIGEST} | jq '.signatures')

            COUNT=$(echo "${SIGNATURES}" | jq '. | length')
            INDEX=$(echo "$((COUNT - 1))")
            echo "SIGNATURE INDEX ${INDEX}"

            SIGNATURE_DATA=$(echo "$SIGNATURES" | jq --arg jq_index "$INDEX" '.[$jq_index|tonumber]')
            echo -n success | tee $(results.status.path)

            #create evidence json
            cd /artifacts
            echo ${SIGNATURE_DATA} > $(params.evidence)
            echo -n $(params.evidence) | tee $(results.signature.path)
          else
            echo "Signing failed."
            cd /artifacts
            echo -n failure | tee $(results.status.path)
            echo {} > $(params.evidence)
            echo -n $(params.evidence) | tee $(results.signature.path)
          fi
      # yamllint enable rule:line-length

  workspaces:
    - name: artifacts
      description: A workspace backing by a volume
      mountPath: /artifacts
